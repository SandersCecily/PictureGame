{"version":3,"sources":["components/Nav/index.js","components/Jumbotron/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","score","highscore","Jumbotron","Container","alt","src","image","id","onClick","gameHandler","App","state","flowers","clicked","_this","includes","setState","push","length","status","index","rand","temp","Math","floor","random","_this2","this","Fragment","components_Nav","topScore","components_Jumbotron","map","flower","components_Container","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w6BAgBeA,MAbf,SAAaC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,cAGAJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BAAkBH,EAAMM,MAAxB,mBAA+CN,EAAMO,UAArD,cCGOC,MAVf,WACE,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,uBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,yFCKOK,MAVf,SAAmBT,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKO,IAAI,kBAAkBC,IAAKX,EAAMY,MAAOC,GAAIb,EAAMa,GAAIC,QAAS,kBAAMd,EAAMe,YAAYf,EAAMa,KAAKT,UAAU,uCC0D1GY,6MAzDbC,MAAQ,CACNC,UACAC,QAAS,GACTb,MAAO,EACPC,UAAW,KAIbQ,YAAc,SAACF,GACb,IAAIM,EAAUC,EAAKH,MAAME,QACzB,GAAIA,EAAQE,SAASR,GACnBO,EAAKE,SAAS,CACZH,QAAS,GAAIb,MAAO,SAOxB,GAHEa,EAAQI,KAAKV,GAGXM,EAAQK,SAAWJ,EAAKH,MAAMC,QAAQM,OAA1C,CAOAJ,EAAKE,SAAS,CAAEJ,UAASC,UAASb,MAAOa,EAAQK,OAAQC,OAAQ,MACjE,IAAIC,EAAQ,EAAGC,EAAO,EAAGC,EAAO,KAGhC,IAAKF,EAAQR,EAAQM,OAAS,EAAGE,EAAQ,EAAGA,GAAS,EACnDC,EAAOE,KAAKC,MAAMD,KAAKE,UAAYL,EAAQ,IAC3CE,EAAOV,EAAQQ,GACfR,EAAQQ,GAASR,EAAQS,GACzBT,EAAQS,GAAQC,OAdhBR,EAAKE,SAAS,CACZhB,MAAO,EAAGa,QAAS,8EAkBhB,IAAAa,EAAAC,KACP,OACEhC,EAAAC,EAAAC,cAACF,EAAAC,EAAMgC,SAAP,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,CAAK7B,MAAO2B,KAAKhB,MAAMX,MAAO8B,SAAUH,KAAKhB,MAAMV,YACnDN,EAAAC,EAAAC,cAACkC,EAAD,MACCJ,KAAKhB,MAAMC,QAAQoB,IAAI,SAAAC,GAAM,OAC5BtC,EAAAC,EAAAC,cAACqC,EAAD,CACEC,IAAKF,EAAO1B,GACZA,GAAI0B,EAAO1B,GACXD,MAAO2B,EAAO3B,MACdG,YAAaiB,EAAKjB,wBAlDZ2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ebc058a4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Click Game\n      </a>\n      <div>\n        <p>Your Score :  {props.score} |  High Score: {props.highscore} </p>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n        <h1 className=\"display-3\">Flower Picture Game</h1>\n        <hr></hr>\n        <p className=\"lead\">Click the pictures below, but beware, click the same one twice and youre out!</p>\n      </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <img alt=\"flower to click\" src={props.image} id={props.id} onClick={() => props.gameHandler(props.id)} className=\"card-img clicked\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Container;\n","import React, { Component } from 'react';\nimport Nav from \"./components/Nav\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Container from \"./components/Container\";\nimport \"./App.css\";\nimport flowers from \"../src/flowers.json\";\n\nclass App extends Component {\n  state = {\n    flowers,\n    clicked: [],\n    score: 0,\n    highscore: 0\n  }\n\n  \n  gameHandler = (id) => {\n    let clicked = this.state.clicked;\n    if (clicked.includes(id)) {\n      this.setState({\n        clicked: [], score: 0\n      })\n      return\n    } else {\n      clicked.push(id);\n    }\n\n    if (clicked.length === this.state.flowers.length) {\n      this.setState({\n        score: 0, clicked: []\n      })\n      return\n    }\n\n    this.setState({ flowers, clicked, score: clicked.length, status: \" \" });\n    var index = 0, rand = 0, temp = null\n\n    //fisher-yates shuffle\n    for (index = flowers.length - 1; index > 0; index -= 1) {\n      rand = Math.floor(Math.random() * (index + 1))\n      temp = flowers[index]\n      flowers[index] = flowers[rand]\n      flowers[rand] = temp\n    }\n\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Nav score={this.state.score} topScore={this.state.highscore} />\n        <Jumbotron />\n        {this.state.flowers.map(flower => (\n          <Container\n            key={flower.id}\n            id={flower.id}\n            image={flower.image}\n            gameHandler={this.gameHandler}\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}